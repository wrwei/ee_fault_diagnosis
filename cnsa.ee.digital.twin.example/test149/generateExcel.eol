"<结果文件生成>".println();
mainGenerateExcel();
//mainGenerateExcel2();
"<结果生成完毕>".println();

operation mainGenerateExcel(){
	for (e in Excel!Sheet){
		delete e;
	}
	Model!Component.all.generate();
	Model!Input.all.generate();
	Model!Output.all.generate();
}

operation Any generate(){
	for (e in self){
		if (e.isDefined() and e.reading.isDefined()){
			var m : new Excel!Sheet;
			m.name = e.name.content;
			m.type = e.type.name;
			m.gid = e.gid;
			m.upper_value = e.reading.upper_value.asReal();
			m.lower_value = e.reading.lower_value.asReal();
			m.value = e.reading.value.asReal();
			if (not e.isDefined()){
			}
			else if (e.type.name == "Fork"){
				"p is Fork.".println();
			}
			else if (e.faulty == true){
				m.state = "故障状态";
			}
			else if (e.RunningNormally == true){
				m.state = "正常状态";
			}
			else if (e.RunningAbnormally == true){
				m.state = "异常状态";
			}
			else if (e.ToBePredicted == true){
				m.state = "待检测";
			}
		}
	}
}

operation mainGenerateExcel2(){
	for (e in Excel!Sheet){
		delete e;
	}
	Model!Component.all.generate2();
	Model!Input.all.generate2();
	Model!Output.all.generate2();
}

operation Any generate2(){
	for (e in self){
		if (e.isDefined() and e.reading.isDefined()){
			var m : new Excel!Sheet;
			m.name = e.name.content;
			m.type = e.type.name;
			m.gid = e.gid;
			m.upper_value = e.reading.upper_value.asReal();
			m.lower_value = e.reading.lower_value.asReal();
			m.value = e.reading.value.asReal();
			if (not e.isDefined()){
			}
			else if (e.type.name == "Fork"){
				"p is Fork.".println();
			}
			else if (e.faulty == true){
				m.state = "故障状态";
			}
			else if (e.RunningNormally == true){
				m.state = "正常状态";
			}
			else if (e.RunningAbnormally == true){
				m.state = "异常状态";
			}
			else if (e.ToBePredicted == true){
				m.state = "待检测";
			}
			m.source = e.getParentsNode().getGidString();
			m.target = e.getChildrenNode().getGidString();
		}
	}
}

operation Any getGidString(){
	var GidString = "";
	for (s in self){
		if (s.isDefined() or s != null){
			GidString = GidString + s.gid;
			GidString = GidString + ";";
		}
	}
	return GidString;
}

operation Any getParentsNode(){
	if (self.IsType("Component")){
//		"component.".println();
		if (self.inputs.notEmpty()){
			return self.inputs;
		}
	}
	else if (self.IsType("DirectedRelationship")){
//		"DirectedRelationship.".println();
		return OrderedSet{self.source};
	}
	else if (self.IsType("Input")){
//		"Input.".println();
		var input = DirectedRelationship.all.select(e|e.target == self).first();
		if (input.isDefined()){
//			"input.isDefined()".println();
//			input.println();
			return OrderedSet{input};
		}
		else{
//			"input.NotDefined".println();
			return null;
		}
	}
	else if (self.IsType("Output")){
//		"Output.".println();
		return OrderedSet{self.eContainer()};
	}
}

operation Any getChildrenNode(){
	if (self.IsType("Component")){
//		"component.".println();
		if (self.outputs.notEmpty()){
			return self.outputs;
		}
	}
	else if (self.IsType("DirectedRelationship")){
//		"DirectedRelationship.".println();
		return OrderedSet{self.target};
	}
	else if (self.IsType("Output")){
//		"Input.".println();
		var output = DirectedRelationship.all.select(e|e.source == self).first();
		if (output.isDefined()){
			return OrderedSet{output};
		}
		else{
			return null;
		}
	}
	else if (self.IsType("Input")){
//		"Output.".println();
		return OrderedSet{self.eContainer()};
	}
}

operation Any IsType(str){
	return self.type.name == str;
}
